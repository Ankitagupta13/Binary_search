// all connected components
#include<algorithm>
#include<iostream>
#include<vector>
#include<bits/stdc++.h>
using namespace std;


// vector<int> printdfs(int **edges, int n, int sv, bool *visited){
//     visited[sv]=true;
//     vector<int> vec;
//     cout<<sv<<" ";
//     // if(sv==n-1)
//     vec.push_back(sv);
//     for(int i=0;i<n;i++){
//         if(i==sv){
//             continue;
//         }
//         if(edges[sv][i] && !visited[i]){
//             // vec.push_back(i);
//             printdfs(edges,n,i,visited);
//         }
//     }
//     // for(auto i:vec){
//     //     cout<<i<<" ";
//     // }
//     // cout<<endl;
//     if(sv==n)
//     return vec;
// }
vector<int> printdfs(int **edges, int n, int sv, bool *visited,vector<int> vec){
    visited[sv]=true;
    // vec;
    // cout<<sv<<" ";
    // if(sv==n-1)
    // if(sv==n-1)
    vec.push_back(sv);
    for(int i=0;i<n;i++){
        if(i==sv){
            continue;
        }
        if(edges[sv][i] && !visited[i]){
            // vec.push_back(i);
            vec = printdfs(edges,n,i,visited,vec);
        }
    }
    // cout<<endl;
    
    return vec;
}
void dfs(int n,int** edges, int sv){
    
    vector<vector<int>> big;
    bool visited[n];
    
    for(int i=0;i<n;i++){
        visited[i] = false;
    }
    for(int i=0;i<n;i++){
        if(!visited[i]){
            // visited[i]=true;
            vector<int> v;
            v = printdfs(edges,n,i,visited,v);
            sort(v.begin(),v.end());
            for(auto i:v){
                cout<<i<<" ";
            }
            cout<<endl;
            // big.push_back(v);
        }
    }
    // return big;
}
int main() {
    int V, E;
    cin >> V >> E;
    int **edges_arr=new int*[V];
    int v1,e1;
    for(int i=0;i<V;i++)
    {
        edges_arr[i]=new int [V];
        for(int j=0;j<V;j++)
        {
            edges_arr[i][j]=0;
        }
    }
	for(int i=0;i<E;i++)
    {
        int a,b;
        cin>>a>>b;
        edges_arr[a][b]=1;
        edges_arr[b][a]=1;
    }
    // cin>>v1>>e1;
    vector<vector<int>> result;
    dfs(V,edges_arr,0);
    // for (int i = 0; i < result.size(); i++) { 
    //     for (int j = 0; j < result[i].size(); j++) 
    //         cout << result[i][j] << " "; 
    //     cout << endl; 
    // } 
    // if(x==0)
    // cout<<"false";
    // else
    //     cout<<"true";
    return 0;
}

